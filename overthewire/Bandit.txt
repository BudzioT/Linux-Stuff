ssh bandit.labs.overthewire.org -p 2220 -l bandit

0 -> 1:
	Look at readme, 'cat' it

	PASS: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If
1 -> 2:
	'-' file, provide relative path to it './-'

	PASS: 263JGJPfgU6LtdEvgfWU1XP5yac29mFx
2 -> 3:
	Spaces in a file name, use 'name'

	PASS: MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx
3 -> 4:
	Move into another directory 'cd'

	PASS: 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ
4 -> 5:
	Only one file is readable
	Use 'file' with wildflag '*' to view types

	PASS: 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw
5 -> 6:
	Find file with certain size, not executable, ASCII
	'find' with flag '-size 1033c' and '-not -executable' is fine

	PASS: HWasnPhtq9AVKe0dmk45nxy20cvUa6EG
6 -> 7:
	File in the entire server, with certain owner, group and size
	Use 'find' with '-user', '-group', 'size', then cat the result
	Get rid of errors by redirecting them to null '2> /dev/null'

	PASS: morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj
7 -> 8:
	Password in a text file, next to 'millionth' word
	Use 'grep'

	PASS: dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc
8 -> 9:
	Lot of copies, only unique password is correct
	Sort the file, use 'uniq' with flag '-u' to show unique entries

	PASS: 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM
9 -> 10:
	Password after several '=', one of the only readable strings
	Look for readable strings 'strings' and then 'grep' it with '=='

	PASS: FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey
10 -> 11:
	Base64 encoded file, decode with 'base 64 -d'

	PASS: dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr
11 -> 12:
	Coded with ROT13, use 'tr' with rotation of 13
	Argument ''A-Za-z' 'N-ZA-Mn-za-m'' push data.txt to it by '<'

	PASS: 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4

12 -> 13:
	Compressed tons of times with gzip, bzip2, tar etc. as a hex dump
	Unhex it by running 'xdd -d' then decompress them tons of times
	Look at 'file' description to know the type of compression
	(Or hex if you feel fancy, it doesn't work with tar though)

	PASS: FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn
13 -> 14:
	Grab the ssh key from sshkey.private file and use it with 'ssh' command
	So connect to overthewire bandit servers with '-i sshkey.private' flag

	PASS: MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS
14 -> 15:
	Grab it from the file you didn't have previously access to
	'/etc/bandit_pas/bandit14', connect by localhost on port 30000
	so 'echo' the key out, then pipe it with 'nc localhost 30000'

	PASS: 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo
15 -> 16:
	Connect to localhost, port 30001 using SSL/TLS. Use 'openssl s_client'
	Flags '-port and -host', then just enter the password

	PASS: kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx
16 -> 17:
	Password on one of open networks from 31000 to 320000
	Use 'nmap' with '-p' flag to scan networks, then connect to the correct one
	To connect use 'openssl s_client' like above.
	You will get RSA KEY, use it on your machine, make the file have 400 permissions

	PASS: Rsa key from the correct port, log in on local machine, not localhost
17 -> 18:
	Different line of 2 files is the password, just use 'diff'

	PASS: x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO
18 -> 19:
	Edited default bash login to log you out, open 'ssh' in 'bash' mode
	Then flag '--norc' which makes it not read the profile file

	PASS: cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8
19 -> 20:
	There is setuid alike binary, execute it with command as an Argument
	So 'cat' with the password path

	PASS: 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO
20 -> 21:
	Password only visible after sending the previous one to some port and reading it
	Use 'nc' with 'lvp' (l - listen, v - verbose, p - port) to listen on random port
	Then send the old password and read it with the binary file
	Split the terminal with tmux 'Ctrl+b !' and move with 'Ctrl+b Ctrl+o'

	PASS: EeoULMCra2q0dSkYj561DX7s1CpBuOBt
21 -> 22:
	Use 'cat' on the cronjob, 'cat' the script and then go to that file, show it again

	PASS: tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q
22 -> 23:
	Password stored in encrypted folder name
	Look at the script in /etc/cron,d, 'cat' it. It uses m5sum to hash a folder
	Encrypt the same thing but with 'bandit23' string instead of 'bandit22'
	Cat the result from /tmp/{result}

	PASS: 0Zf11ioIjMVN551jX3CmStKLYqjk54Ga
23 -> 24:
	Cron job running every minute, executing and deleting scripts from certain directory
	Make a temp dir, create a bash script to store password (as it is executed by bandit24)
	'cat /etc/bandit_pass/bandit24 > /tmp/{your_folder}/{password_file}'

	PASS: gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8
24 -> 25:
	Daoemon listening on some port, requires password from previous level and 4 digit pin
	Write a simple bash script to make it work. For loop, while echoing it with password
	Run it directly in terminal, pipe with 'nc'

	PASS: iCi86ttT4KSNe1armKiwbQNmB3YJP3q4
25 -> 26:
	Default shell for the user keeps loggin you out, password in file accesible by bandit26
	If you look at '/etc/passwd' you can see some different shell used, 'cat' it
	It opens a file in 'more', which allows to edit, execute stuff if text is big enough
	Make the terminal window small, go into 'vi' and execute ':set shell=/bin/bash'
	Then go into shell ':shell' and 'cat' the password from '/etc/bandit_pass/bandit26'
	
	PASS: s0773xxkk0MXfdqOfPRVr9L3jJBUOgCZ
26 -> 27:
	Use the binary file, it allows you to execute commands as bandit27
	Just show the password using 'cat'

	PASS: upsNCc7vzaRDx6oZC6GiR6ERwe1MowGB
27 -> 28:
	Code in a repo accessible through SSH.
	Clone the repo, use correct port 'git clone ssh://user@localhost:[port]/[repo]'
	Then just 'cat' the readme

	PASS: Yz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN
28 -> 29:
	Clone repo, there is a file with credentials that are hidden
	Look into commit history and use 'git show' with the correct hash
	It will have the correct password

	PASS: 4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ7
29 -> 30:
	Clone repo, it seems like password isn't in production branch
	Check all branches 'git branch -a', move into development one and grab password

	PASS: qp30ex3VLz5MDG1n91YowTv4Q8l7CDZL
30 -> 31:
	Clone repo, look at tags 'git tag', then show secret one 'git show'

	PASS: fb5S2xb7bRyFmAvQYQGEqsbhVyJqhnDy
31 -> 32:
	Clone repo, readme tells you to add specific file.
	Force it with '-f' flag, push it onto github

	PASS: 3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K
32 -> 33:
	Interactive shell, turns every command to uppercase
	Use '$0' to escape it, then just 'cat' your password

	PASS: tQdtbs5D5i2vJwkO8mEyYEyTL8izoeJ0